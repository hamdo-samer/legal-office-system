import mysql from 'mysql2/promise';

// ุฅุนุฏุงุฏุงุช ุงูุงุชุตุงู ุจูุงุนุฏุฉ ุงูุจูุงูุงุช
const dbConfig = {
  host: process.env.DB_HOST || 'localhost',
  user: process.env.DB_USER || 'root',
  password: process.env.DB_PASSWORD || '',
  database: process.env.DB_NAME || 'legal_office_system',
  port: parseInt(process.env.DB_PORT || '3306'),
  charset: 'utf8mb4',
  timezone: '+00:00',
  acquireTimeout: 60000,
  timeout: 60000,
  reconnect: true,
};

// ุฅูุดุงุก pool ููุงุชุตุงูุงุช
const pool = mysql.createPool({
  ...dbConfig,
  waitForConnections: true,
  connectionLimit: 10,
  queueLimit: 0,
});

// ุฏุงูุฉ ููุญุตูู ุนูู ุงุชุตุงู
export async function getConnection() {
  try {
    const connection = await pool.getConnection();
    return connection;
  } catch (error) {
    console.error('ุฎุทุฃ ูู ุงูุงุชุตุงู ุจูุงุนุฏุฉ ุงูุจูุงูุงุช:', error);
    throw error;
  }
}

// ุฏุงูุฉ ูุชูููุฐ ุงุณุชุนูุงู
export async function executeQuery(query: string, params: any[] = []) {
  const connection = await getConnection();
  try {
    const [results] = await connection.execute(query, params);
    return results;
  } catch (error) {
    console.error('ุฎุทุฃ ูู ุชูููุฐ ุงูุงุณุชุนูุงู:', error);
    throw error;
  } finally {
    connection.release();
  }
}

// ุฏุงูุฉ ูุชูููุฐ ุงุณุชุนูุงู ูุน ุฅุฑุฌุงุน ุงููุชุงุฆุฌ ูุงููุนูููุงุช ุงูุฅุถุงููุฉ
export async function executeQueryWithInfo(query: string, params: any[] = []) {
  const connection = await getConnection();
  try {
    const [results, fields] = await connection.execute(query, params);
    return { results, fields };
  } catch (error) {
    console.error('ุฎุทุฃ ูู ุชูููุฐ ุงูุงุณุชุนูุงู:', error);
    throw error;
  } finally {
    connection.release();
  }
}

// ุฏุงูุฉ ูุชูููุฐ ูุนุงููุฉ (transaction)
export async function executeTransaction(queries: { query: string; params?: any[] }[]) {
  const connection = await getConnection();
  try {
    await connection.beginTransaction();
    
    const results = [];
    for (const { query, params = [] } of queries) {
      const [result] = await connection.execute(query, params);
      results.push(result);
    }
    
    await connection.commit();
    return results;
  } catch (error) {
    await connection.rollback();
    console.error('ุฎุทุฃ ูู ุชูููุฐ ุงููุนุงููุฉ:', error);
    throw error;
  } finally {
    connection.release();
  }
}

// ุฏุงูุฉ ูุงุฎุชุจุงุฑ ุงูุงุชุตุงู
export async function testConnection() {
  try {
    const connection = await getConnection();
    await connection.ping();
    connection.release();
    console.log('โ ุชู ุงูุงุชุตุงู ุจูุงุนุฏุฉ ุงูุจูุงูุงุช ุจูุฌุงุญ');
    return true;
  } catch (error) {
    console.error('โ ูุดู ุงูุงุชุตุงู ุจูุงุนุฏุฉ ุงูุจูุงูุงุช:', error);
    return false;
  }
}

// ุฏุงูุฉ ููุญุตูู ุนูู ุฅุญุตุงุฆูุงุช ูุงุนุฏุฉ ุงูุจูุงูุงุช
export async function getDatabaseStats() {
  try {
    const stats = {
      users: await executeQuery('SELECT COUNT(*) as count FROM users'),
      clients: await executeQuery('SELECT COUNT(*) as count FROM clients'),
      cases: await executeQuery('SELECT COUNT(*) as count FROM cases'),
      appointments: await executeQuery('SELECT COUNT(*) as count FROM appointments'),
      contracts: await executeQuery('SELECT COUNT(*) as count FROM contracts'),
      invoices: await executeQuery('SELECT COUNT(*) as count FROM invoices'),
      documents: await executeQuery('SELECT COUNT(*) as count FROM documents'),
    };
    
    return Object.fromEntries(
      Object.entries(stats).map(([key, value]: [string, any]) => [
        key,
        Array.isArray(value) && value.length > 0 ? value[0].count : 0
      ])
    );
  } catch (error) {
    console.error('ุฎุทุฃ ูู ุงูุญุตูู ุนูู ุฅุญุตุงุฆูุงุช ูุงุนุฏุฉ ุงูุจูุงูุงุช:', error);
    throw error;
  }
}

// ุฏุงูุฉ ูุฅูุดุงุก ุฌุฏุงูู ูุงุนุฏุฉ ุงูุจูุงูุงุช (ููุงุณุชุฎุฏุงู ูู ุงูุชุทููุฑ)
export async function createTables() {
  const createTableQueries: string[] = [
    // ูููู ุฅุถุงูุฉ ุงุณุชุนูุงูุงุช ุฅูุดุงุก ุงูุฌุฏุงูู ููุง ุฅุฐุง ูุฒู ุงูุฃูุฑ
  ];
  
  try {
    for (const query of createTableQueries) {
      await executeQuery(query);
    }
    console.log('โ ุชู ุฅูุดุงุก ุงูุฌุฏุงูู ุจูุฌุงุญ');
  } catch (error) {
    console.error('โ ุฎุทุฃ ูู ุฅูุดุงุก ุงูุฌุฏุงูู:', error);
    throw error;
  }
}

// ุชุตุฏูุฑ pool ููุงุณุชุฎุฏุงู ุงููุจุงุดุฑ ุฅุฐุง ูุฒู ุงูุฃูุฑ
export { pool };

// ุฏุงูุฉ ูุฅุบูุงู ุฌููุน ุงูุงุชุตุงูุงุช (ููุงุณุชุฎุฏุงู ุนูุฏ ุฅููุงู ุงูุชุทุจูู)
export async function closeAllConnections() {
  try {
    await pool.end();
    console.log('โ ุชู ุฅุบูุงู ุฌููุน ุงุชุตุงูุงุช ูุงุนุฏุฉ ุงูุจูุงูุงุช');
  } catch (error) {
    console.error('โ ุฎุทุฃ ูู ุฅุบูุงู ุงุชุตุงูุงุช ูุงุนุฏุฉ ุงูุจูุงูุงุช:', error);
  }
}

// ูุนุงูุฌ ุงูุฃุฎุทุงุก ุงูุนุงู
process.on('SIGINT', async () => {
  console.log('๐ ุฅููุงู ุงูุชุทุจูู...');
  await closeAllConnections();
  process.exit(0);
});

process.on('SIGTERM', async () => {
  console.log('๐ ุฅููุงู ุงูุชุทุจูู...');
  await closeAllConnections();
  process.exit(0);
});
